{"version":3,"sources":["logo.svg","components/Clock.jsx","components/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","myfunc","seconds","temp","formatTime","console","log","temp2","time","setInterval","setState","time1","clearInterval","state","flag","timeInSeconds","minutes","Math","floor","this","className","React","Component","Countdown","count","e","preventDefault","secondsStr","refs","value","childRef","ref","onSubmit","bind","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,0ICyF5BC,E,kDAtFX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IA+BVC,OAAO,SAACC,GACJ,IAAMC,EAAO,EAAKC,WAAWF,GAC7BG,QAAQC,IAAIH,GACZ,IAAII,EAAQL,EAGJM,EAAKC,aAAY,WACjBJ,QAAQC,IAAI,YACZC,GAAO,EAEP,EAAKG,SAAS,CACVC,MAAMJ,IAGG,IAATA,GACAK,cAAcJ,KAGhB,MAhDV,EAAKK,MAAM,CACPF,MAAO,GACPG,MAAM,GAJI,E,uDAQPC,GACP,IAAIb,EAAUa,EAAgB,GAC1BC,EAAUC,KAAKC,MAAMH,EAAgB,IAUzC,OARIb,EAAU,KACVA,EAAU,IAAMA,GAGhBc,EAAU,KACVA,EAAU,IAAMA,GAGbA,EAAU,IAAMd,I,+BAyCDiB,KAAKnB,MAAtBe,cAaL,OAXII,KAAKN,MAAMC,KAYX,yBAAKM,UAAU,SACX,0BAAMA,UAAU,cACXD,KAAKN,MAAMF,Y,GA9EZU,IAAMC,WCwCXC,E,kDAtCX,aAAc,IAAD,8BACT,gBACKV,MAAM,CACPW,MAAO,MAHF,E,qDAUJC,GACLA,EAAEC,iBAED,IAAIC,EAAaR,KAAKS,KAAK1B,QAAQ2B,MACpCV,KAAKT,SAAS,CAACc,MAAMG,IACrBR,KAAKS,KAAK1B,QAAQ2B,MAAM,IACxBV,KAAKS,KAAKE,SAAS7B,OAAO0B,K,+BAQ1B,OACI,6BACI,kBAAC,EAAD,CAAOZ,cAAeI,KAAKN,MAAMW,MAAOO,IAAI,aAC5C,6BACA,0BAAMA,IAAI,OAAOC,SAAUb,KAAKa,SAASC,KAAKd,MAAOC,UAAU,kBAC3D,2BAAOc,KAAK,OAAOH,IAAI,UAAUI,YAAY,0BAC7C,2BAAOD,KAAK,SAASd,UAAU,0BAA0BS,MAAM,2B,GA/B3DR,IAAMC,WCSfc,MARf,WACE,OACE,yBAAKhB,UAAU,OACd,kBAAC,EAAD,QCKeiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.13af6331.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            time1: \"\",\r\n            flag: true\r\n        }\r\n    }\r\n    \r\n    formatTime(timeInSeconds) {\r\n        var seconds = timeInSeconds % 60;\r\n        var minutes = Math.floor(timeInSeconds / 60);\r\n\r\n        if (seconds < 10) {\r\n            seconds = '0' + seconds;\r\n        }\r\n\r\n        if (minutes < 10) {\r\n            minutes = '0' + minutes;\r\n        }\r\n\r\n        return minutes + ':' + seconds;\r\n    }\r\n    // interval(time2){\r\n        \r\n    //     setInterval(() => {\r\n    //         time2-=1;\r\n    //         console.log(this.formatTime(time2));\r\n    //         this.setState( {time1:\"5\"})\r\n          \r\n    //     }, 1000);\r\n\r\n    // }\r\n    myfunc=(seconds)=>{\r\n        const temp = this.formatTime(seconds)\r\n        console.log(temp)\r\n        var temp2 = seconds\r\n            // var time2=timeInSeconds;\r\n            // this.interval(time2);\r\n            var time=setInterval(()=>{\r\n                console.log(\"checking\")\r\n                temp2-=1;\r\n                // console.log(this.myfunc(time2))\r\n                this.setState({\r\n                    time1:temp2\r\n                })\r\n                \r\n                if (temp2 ===0){\r\n                    clearInterval(time)\r\n                    // window.location.reload(false)\r\n                }\r\n                },1000);\r\n        \r\n              \r\n\r\n    \r\n}\r\n      \r\n   \r\n\r\n\r\n    render() {\r\n        var {timeInSeconds} = this.props;\r\n\r\n        if (this.state.flag===true){\r\n            // myfunc()\r\n        } \r\n        \r\n        \r\n        \r\n        // this.setState({time1:time2});\r\n        \r\n        \r\n        \r\n        //Keep the classes name. Try to inject your code and do not remove existing code\r\n        return (\r\n            <div className=\"clock\">\r\n                <span className=\"clock-text\">\r\n                    {this.state.time1}\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Clock;","import React from 'react';\r\nimport Clock from './Clock';\r\n\r\nclass Countdown extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count: null\r\n\r\n        }\r\n        // this.childRef = React.createRef()\r\n    }\r\n\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault()\r\n        //This will give you string for seconds. Do not remove refs\r\n         var secondsStr = this.refs.seconds.value;\r\n        this.setState({count:secondsStr});\r\n        this.refs.seconds.value=\" \"\r\n        this.refs.childRef.myfunc(secondsStr)\r\n \r\n        \r\n     }\r\n  \r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <Clock timeInSeconds={this.state.count} ref=\"childRef\"/>\r\n                <div>\r\n                <form ref=\"form\" onSubmit={this.onSubmit.bind(this)} className=\"countdown-form\">\r\n                    <input type=\"text\" ref=\"seconds\" placeholder=\"Enter time in seconds\"/>\r\n                    <input type=\"submit\" className=\"button success expanded\" value=\"Start Countdown\"/>\r\n                </form>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Countdown;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Countdown from \"./components/Countdown\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Countdown />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}